# Databricks notebook source
# MAGIC %md
# MAGIC ### Description
# MAGIC This notebook addresses Task 272197 - Verify if CM1X vehicle in in the datasource 
# MAGIC 
# MAGIC **Troubleshooting missing vehicle in the report**
# MAGIC VIN: HCCZTL80JMCJ26017 (CM1X model)
# MAGIC 
# MAGIC **Performing the following tasks**
# MAGIC 1. Examine vms_history.csv 
# MAGIC 2. Step through Vehicle History logic
# MAGIC 2. Examine vehicles delta table

# COMMAND ----------

# MAGIC %md
# MAGIC ### Part I - Examine vms_history table

# COMMAND ----------

# MAGIC %sql
# MAGIC select *
# MAGIC from gss.metrics
# MAGIC where vin ='HCCZTL80JMCJ26017'
# MAGIC --where device_type like 'CM1X%'

# COMMAND ----------

# MAGIC %md
# MAGIC ### Part II - Step through VMS History logic

# COMMAND ----------

# MAGIC %md
# MAGIC ## Read

# COMMAND ----------

# import libraries
from pyspark.sql.functions import *
from pyspark.sql.types import *
from pyspark.sql.window import Window
import time
from datetime import date, timedelta, datetime, timezone

# COMMAND ----------

# ***** Spark Configuration
from pyspark.conf import SparkConf
conf = SparkConf()
conf.set("spark.sql.inMemoryColumnarStorage.compressed", True)
conf.set("spark.sql.adaptive.enabled",True)
conf.set("spark.databricks.io.cache.enabled", True);

# COMMAND ----------

# vms history query that is used in CRM backend
# -- vms history query
# select a.accountnumber as Company_Id, b.rey_accountidname , b.rey_brandidname,b.rey_eqmodelidname, b.rey_companyequipmentid,  b.rey_eqproductlineidname, b.rey_serialnumber,
#   b.rey_nickname, b.statuscodename, b.statecodename,  b.modifiedon, b.modifiedbyname
# from
# --get companyid from account table
# (select accountnumber, accountid
# from account ) a
# join 
# (select rey_accountid, rey_accountidname, rey_brandidname,rey_companyequipmentid,  rey_eqmodelidname, rey_eqproductlineidname, rey_serialnumber, rey_nickname,
#  statecodename, statuscodename,   modifiedon, modifiedbyname
# FROM rey_equipment2) b
# on (a.accountid = b.rey_accountid);

# COMMAND ----------

# MAGIC %md
# MAGIC After copying and pasting SQL query results into Excell, format modified column by custom cell format of "yyyy-mm-dd hh:mm:ss.000". Save as a "csv" file and then upload to Databricks File storate (dbfs).

# COMMAND ----------

# read data from csv file (csv file is uploaded to dbfs manually once a day )
# the csv file is generated by querying the CRM backend in XRM (the query is in the above cell)
# note that the csv file is now uploaded to shared_uploads/customer_solutions folder in DBFS account, and but will be moved to Azure storage account in the future

path = "dbfs:/FileStore/shared_uploads/customer_solutions/vms_history.csv"
vms_history_tst = spark.read.format("csv").option("header", "true").load(path).cache()

# COMMAND ----------

display(vms_history_tst.limit(5))

# COMMAND ----------

# vms_history.count()

# COMMAND ----------

# MAGIC %md
# MAGIC ## Transform

# COMMAND ----------

# for every distinct ceqid get the latest record available
windowSpec  = Window.partitionBy('Company_Id', "rey_companyequipmentid").orderBy(col("modifiedon").desc())

# trim and remove invalied values in CEQID column 
vms_latest_trimmed = vms_history_tst\
.withColumn("row_number",row_number().over(windowSpec)) \
.where("row_number = 1")\
.withColumn('Trimmed_CEQID', trim('rey_companyequipmentid'))\
.filter(~col('Trimmed_CEQID').isin('0', '1', 'NULL', 'CR9.80', 'T8.410'))\
.dropDuplicates()\
.cache()

# COMMAND ----------

# vms_latest_trimmed.count()

# COMMAND ----------

# display(vms_latest_trimmed.limit(5))

# COMMAND ----------

# MAGIC %md
# MAGIC #### Clean CEQID

# COMMAND ----------

# clean CEQID column 
vms_ceqid_cleaned = vms_latest_trimmed\
.withColumn("CEQID", 
            when(vms_latest_trimmed.Trimmed_CEQID.contains('_'), translate(col("Trimmed_CEQID"), "_", ""))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains('-DUPLICATE'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, '-DUPLICATE', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains('-duplicate'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, '-duplicate', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains(' - duplicate 1'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, ' - duplicate 1', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains('-Duplicate'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, '-Duplicate', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains('-Duplicate2'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, '-Duplicate2', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains('- Duplicate record no devices'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, '- Duplicate record no devices', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains(' - Duplicate'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, ' - Duplicate', ''))\
            .when(vms_latest_trimmed.Trimmed_CEQID.contains(' �- �Duplicate record'), regexp_replace(vms_latest_trimmed.Trimmed_CEQID, ' �- �Duplicate record', ''))\
            .otherwise(vms_latest_trimmed.Trimmed_CEQID))\
.withColumn('CEQID_Length', length(col('CEQID')))\
.cache()

# COMMAND ----------

# display(vms_ceqid_cleaned.where(col('CEQID').contains('Dup')))

# COMMAND ----------

# vms_ceqid_cleaned.count()

# COMMAND ----------

# display(vms_ceqid_cleaned.limit(5))

# COMMAND ----------

# MAGIC %md
# MAGIC #### Clean Product Line

# COMMAND ----------

# display(vms_ceqid_cleaned.select('rey_eqproductlineidname').distinct())

# COMMAND ----------

# clean product line column values according to provided criteria at workitem https://dev.azure.com/cnhi/Data%20Analytics%20and%20Strategy/_workitems/edit/266647
product_line_cleaned = vms_ceqid_cleaned.withColumn("Product_Line",    \
                                                  trim(
                                                    when( col('rey_eqproductlineidname') == 'COMBINE', 'COMBINES')\
                                                    .otherwise( when( col('rey_eqproductlineidname') == 'GRAPE HARVESTERS', 'SP GRAPE HARVESTER')\
                                                    .otherwise( when( col('rey_eqproductlineidname') == 'SP SPRAYER', 'SP SPRAYERS')\
                                                    .otherwise( when( col('rey_eqproductlineidname') == 'TRACTOR', 'TRACTORS')\
                                                    .otherwise( when( col('rey_eqproductlineidname').isin('N.A.', 'OthAgOEM Implement', 'TRACTOR LOADER BACKHOE'), 'UNKNOWN')\
                                                    .otherwise( when( ~col('rey_eqproductlineidname')\
.isin(\
"AIR DRILLS"
,"COMBINES"
,"COMBO PRIMARY TILLAGE"
,"CORN HEADERS"
,"DISC MC"
,"FIELD CULTIVATORS"
,"FLOATERS"
,"HARVESTER"
,"LARGE SQUARE BALER"
,"PLANTERS"
,"PT FORAGE HARVESTER"
,"ROUND BALER"
,"SP FORAGE HARVESTER"
,"SP GRAPE HARVESTER"
,"SP SPRAYERS"
,"SP WINDROWER"
,"SUGAR CANE HARVESTER"
,"TELEHANDLERS AG"
,"TRACTORS"), 'UNKNOWN')\
                                                     .otherwise( col('rey_eqproductlineidname'))\
                                                      )))))))\
.cache()

# COMMAND ----------

# display(product_line_cleaned.limit(5))

# COMMAND ----------

# validate
# display(product_line_cleaned.where("rey_eqproductlineidname = 'HARVESTER'").select('rey_eqproductlineidname', 'Product_Line'))

# COMMAND ----------

# # validate
# display(product_line_cleaned.filter(~col('rey_eqproductlineidname').isin(\
# "AIR DRILLS"
# ,"COMBINES"
# ,"COMBO PRIMARY TILLAGE"
# ,"CORN HEADERS"
# ,"DISC MC"
# ,"FIELD CULTIVATORS"
# ,"FLOATERS"
# ,"HARVESTER"
# ,"LARGE SQUARE BALER"
# ,"PLANTERS"
# ,"PT FORAGE HARVESTER"
# ,"ROUND BALER"
# ,"SP FORAGE HARVESTER"
# ,"SP GRAPE HARVESTER"
# ,"SP SPRAYERS"
# ,"SP WINDROWER"
# ,"SUGAR CANE HARVESTER"
# ,"TELEHANDLERS AG"
# ,"TRACTORS"))\
# .select('rey_eqproductlineidname', 'Product_Line').distinct())

# COMMAND ----------

# MAGIC %md
# MAGIC #### Clean Vehicle Nickname

# COMMAND ----------

display(product_line_cleaned.select("rey_nickname").distinct())

# COMMAND ----------

# when vehicle nickname column value is null , populate it with a new composite value of "Model-last 6 digits of VIN number" as specified on https://dev.azure.com/cnhi/Data%20Analytics%20and%20Strategy/_workitems/edit/265791

# 1.	if VIN is null then just use the Model
# 2.	if Model is null then just use the - and last 6 digits of the VIN.
# 3.	If both are null then just enter 'NOT DEFINED' - it is likely that these vehicles will either not send any data into our system as they are outdated or they need to be updated in VMS. 
# We should review all vehicles that end up with either a nickname < 6 characters or are NOT DEFINED to determine if this will be a bigger issue that needs either a different CRM data source or corrections in how the data is being entered/updated in the back end.


nickname_cleaned = product_line_cleaned\
.withColumn('Vehicle_Nickname', 
     trim(\
       when( ( (col('rey_nickname') == 'NULL') | (col('rey_nickname') == '') | (col('rey_nickname') == ' ')) & \
          ( (col('rey_eqmodelidname') == 'NULL') & (col('rey_serialnumber') == 'NULL') ), \
                           'NOT DEFINED') \
       .otherwise ( when( ( (col('rey_nickname') == 'NULL') | (col('rey_nickname') == '') | (col('rey_nickname') == ' ') ) & \
          (col('rey_serialnumber') == 'NULL'),  \
                            concat_ws('-',trim(col('rey_eqmodelidname'))) ) \
       .otherwise( when( ( (col('rey_nickname') == 'NULL') | (col('rey_nickname') == '') | (col('rey_nickname') == ' ') ) & \
          (col('rey_eqmodelidname') == 'NULL'), \
                           concat_ws('-', substring('rey_serialnumber', -6, 6)) ) \
       .otherwise( when( (col('rey_nickname') == 'NULL') | (col('rey_nickname') == '') | (col('rey_nickname') == ' '), \
                          concat_ws('-',trim(col('rey_eqmodelidname')), substring('rey_serialnumber', -6, 6)) )\
       .otherwise(col('rey_nickname')))))))\
.cache()

# COMMAND ----------

# display(nickname_cleaned.select('rey_nickname', 'rey_eqmodelidname', 'rey_serialnumber','Vehicle_Nickname').limit(5))

# COMMAND ----------

# # validate
# display(nickname_cleaned.where("rey_eqmodelidname == 'NULL' and rey_serialnumber <>  'NULL'")\
# .select('rey_nickname','rey_eqmodelidname', 'rey_serialnumber','Vehicle_Nickname'))

# COMMAND ----------

# # validate 
# display(nickname_cleaned.where("rey_serialnumber == 'NULL' and rey_eqmodelidname <>  'NULL'")\
# .select('rey_nickname','rey_eqmodelidname', 'rey_serialnumber','Vehicle_Nickname'))

# COMMAND ----------

# rename and select necessary columns
vms_history_renamed = nickname_cleaned\
.withColumnRenamed('rey_accountidname', 'Company_Name')\
.withColumnRenamed('rey_brandidname', 'Brand_Name')\
.withColumnRenamed('rey_eqmodelidname', 'Vehicle_Model')\
.withColumnRenamed('rey_serialnumber', 'VIN')\
.withColumnRenamed('modifiedon', 'Last_Modified_Timestamp')\
.select('VIN', 'Vehicle_Nickname', 'CEQID', 'Company_Id', 'Company_Name', 'Brand_Name', 'Vehicle_Model', 'Product_Line', 'statuscodename', 'statecodename', 'Last_Modified_Timestamp')\
.sort('Last_Modified_Timestamp')\
.cache()

# COMMAND ----------

# display(vms_history_renamed.limit(5))

# COMMAND ----------

# # there should be no more than 20 product line names as listed in the work item above
# display(vms_history_renamed.select('Product_Line').distinct())

# COMMAND ----------

# vms_history_renamed.count()

# COMMAND ----------

# MAGIC %md
# MAGIC ## Write

# COMMAND ----------

# write to a table in delta format
#vms_history_renamed\
#.withColumn("db_processed_time_utc", current_timestamp()) \
#.write.format("delta") \
#.mode("overwrite") \
#.option("mergeSchema", 'true')\
#.saveAsTable("Report_Service.vms_history")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Invalid Product Line Names

# COMMAND ----------

# this list needs to be sent to VMS/CRM team periodically so that they can take an action on cleaning it from the source

distinct_invalid_product_names = product_line_cleaned.filter(~col('rey_eqproductlineidname')\
.isin(\
"AIR DRILLS"
,"COMBINES"
,"COMBO PRIMARY TILLAGE"
,"CORN HEADERS"
,"DISC MC"
,"FIELD CULTIVATORS"
,"FLOATERS"
,"HARVESTER"
,"LARGE SQUARE BALER"
,"PLANTERS"
,"PT FORAGE HARVESTER"
,"ROUND BALER"
,"SP FORAGE HARVESTER"
,"SP GRAPE HARVESTER"
,"SP SPRAYERS"
,"SP WINDROWER"
,"SUGAR CANE HARVESTER"
,"TELEHANDLERS AG"
,"TRACTORS"))\
.select('rey_eqproductlineidname')\
.distinct()

# COMMAND ----------

# display(distinct_invalid_product_names)

# COMMAND ----------

distinct_invalid_product_names.count()

# COMMAND ----------

# make a list of bad/invalid/corrupt product line names with vehicle details 
# null value is not actual null, it is a string data type with "NULL" in rey_eqproductlineidname column

invalid_product_line_names = product_line_cleaned\
.where("""
rey_eqproductlineidname <> 'NULL' 
AND rey_eqproductlineidname NOT IN (
'AIR DRILLS'
,'COMBINES'
,'COMBO PRIMARY TILLAGE'
,'CORN HEADERS'
,'DISC MC'
,'FIELD CULTIVATORS'
,'FLOATERS'
,'HARVESTER'
,'LARGE SQUARE BALER'
,'PLANTERS'
,'PT FORAGE HARVESTER'
,'ROUND BALER'
,'SP FORAGE HARVESTER'
,'SP GRAPE HARVESTER'
,'SP SPRAYERS'
,'SP WINDROWER'
,'SUGAR CANE HARVESTER'
,'TELEHANDLERS AG'
,'TRACTORS'
)
"""
) \
.withColumnRenamed('Company_Id', 'accountnumber')\
.select('accountnumber', 'rey_accountidname', 'rey_companyequipmentid', 'rey_serialnumber', 'rey_eqproductlineidname')\
.cache()

# COMMAND ----------

# display(invalid_product_line_names.limit(5))

# COMMAND ----------

# invalid_product_line_names.count()

# COMMAND ----------

# write to a table in delta format
#invalid_product_line_names\
#.withColumn("db_processed_time_utc", current_timestamp()) \
#.write.format("delta") \
#.mode("overwrite") \
#.option("mergeSchema", 'true')\
#.saveAsTable("report_service.invalid_product_line_names")

# COMMAND ----------

# MAGIC %md
# MAGIC ### Part III - Exploring vehicles delta table

# COMMAND ----------

df = spark.read.load("abfss://deltatable@euedspadl010d.dfs.core.windows.net/CROSS/GSS/assets/vehicles")
df.count()


# COMMAND ----------


